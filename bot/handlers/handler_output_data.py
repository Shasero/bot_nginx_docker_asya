import logging
import json
import os
import time
import asyncio
import transliterate
from datetime import datetime, timezone
from logging.handlers import RotatingFileHandler

from aiogram import F, Router, html, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv

import keyboards.keyboard as kb
import database.requests as rq

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
class JsonFormatter(logging.Formatter):
    def format(self, record):
        log_record = {
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "level": record.levelname,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "user_id": getattr(record, 'user_id', None),
            "extra": getattr(record, 'extra', {})
        }
        if record.exc_info:
            log_record["exception"] = self.formatException(record.exc_info)
        return json.dumps(log_record, ensure_ascii=False)

def setup_logger():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)

    os.makedirs('logs', exist_ok=True)
    
    file_handler = RotatingFileHandler(
        'logs/handler_output_data.log',
        maxBytes=10*1024*1024,
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(JsonFormatter())
    
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(JsonFormatter())
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    return logger

logger = setup_logger()

router = Router()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_action(func):
    async def wrapper(*args, **kwargs):
        filtered_kwargs = {k: v for k, v in kwargs.items() if k in func.__annotations__}
        message_or_callback = args[0]
        user_id = getattr(message_or_callback.from_user, 'id', None)
        extra = {'user_id': user_id}
        
        logger.info(f"Start {func.__name__}", extra={'extra': extra})
        start_time = time.time()
        
        try:
            result = await func(*args, **filtered_kwargs)
            exec_time = time.time() - start_time
            logger.info(f"Completed {func.__name__} in {exec_time:.2f}s",
                      extra={'extra': {**extra, 'exec_time': exec_time}})
            return result
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {str(e)}", exc_info=True,
                       extra={'extra': extra})
            raise
    return wrapper

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class CardPayStates(StatesGroup):
    successful_photo_gaid = State()
    successful_photo_kurs = State()

class UserSelectionStates(StatesGroup):
    waiting_for_selection = State()
    selected_gaid = State()
    selected_kurs = State()

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
class OutputDataHandler:
    def __init__(self, data_type: str):
        self.data_type = data_type
        self.data_file = f"{data_type}_data.json"
        
    def transliterate_filename(self, filename):
        """–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."""
        try:
            return transliterate.translit(filename, 'ru', reversed=True)
        except transliterate.exceptions.TranslitException:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é '{filename}'")
            return filename
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞."""
        if os.path.exists(self.data_file):
            with open(self.data_file, "r", encoding='utf-8') as f:
                try:
                    return json.load(f)
                except json.JSONDecodeError:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ {self.data_file}")
                    return {}
        return {}
    
    def save_data(self, data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª."""
        with open(self.data_file, "w", encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    
    async def start(self, message: Message, bot: Bot):
        """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏."""
        check_func = getattr(rq, f'proverka_{self.data_type}s')
        if await check_func() is None:
            logger.warning(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö {self.data_type}–æ–≤")
            data_name = "–≥–∞–π–¥" if self.data_type == "gaid" else "–∫—É—Ä—Å"
            await bot.send_message(message.from_user.id, f'–ü–æ–∫–∞ {data_name}–æ–≤ –Ω–µ—Ç')
        else:
            keyboard_func = getattr(kb, f'selectkeyboard{self.data_type}')
            data_name = "–≥–∞–π–¥" if self.data_type == "gaid" else "–∫—É—Ä—Å"
            await bot.send_message(
                message.from_user.id,
                f'üìñ{data_name.capitalize()}—ã: ' if self.data_type == 'gaid' else f'ü§ì{data_name.capitalize()}—ã: ',
                reply_markup=await keyboard_func()
            )
    
    async def select(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞."""
        await callback.answer('')

        if not hasattr(callback, 'from_user') or not callback.from_user:
            logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ callback")
            return

        user_name = callback.from_user.full_name
        admin_id = os.getenv('ADMIN_ID')
        selection_id = callback.data.split('_')[1] 
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            selection_id=selection_id,
            user_id=callback.from_user.id,
            user_name=user_name,
            admin_id=admin_id,
            data_type=self.data_type
        )

        if self.data_type == 'gaid':
            await state.set_state(UserSelectionStates.selected_gaid)
        else:
            await state.set_state(UserSelectionStates.selected_kurs)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
        data = self.load_data()
        if str(user_name) not in data:
            data[str(user_name)] = []
        
        get_func = getattr(rq, f'get_{self.data_type}')
        items = await get_func(selection_id)
        if not items:
            await logger.error("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        for item in items:
            transliterated_name = self.transliterate_filename(
                item.name_fail_gaid if self.data_type == 'gaid' else item.name_fail_kurs
            )
            
            if transliterated_name not in data[str(user_name)]:
                data[str(user_name)].append(transliterated_name)
        
        self.save_data(data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        for item in items:
            photo_field = getattr(item, f'photo_{self.data_type}')
            name_field = getattr(item, f'name_fail_{self.data_type}')
            description_field = getattr(item, f'description_{self.data_type}')
            price_card_field = getattr(item, f'price_card_{self.data_type}')
            price_star_field = getattr(item, f'price_star_{self.data_type}')
            
            await callback.message.answer_photo(photo_field)
            await callback.message.answer(
                f'{html.bold("–ì–∞–π–¥:" if self.data_type == "gaid" else "–ö—É—Ä—Å:")} {name_field}\n'
                f'{html.bold("–û–ø–∏—Å–∞–Ω–∏–µ:")} {description_field}\n'
                f'{html.bold("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö:")} {price_card_field}\n'
                f'{html.bold("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö:")} {price_star_field}',
                reply_markup=getattr(kb, f'payment_keyboard_{self.data_type}')
            )
    
    async def buy_with_stars(self, callback: CallbackQuery, state: FSMContext):
        """–ü–æ–∫—É–ø–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–≤–µ–∑–¥."""
        data = await state.get_data()
        selection_id = data.get('selection_id')
        
        if not selection_id:
            await logger.error("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç")
            return
            
        get_func = getattr(rq, f'get_{self.data_type}')
        items = await get_func(selection_id)
        
        for item in items:
            name_field = getattr(item, f'name_fail_{self.data_type}')
            description_field = getattr(item, f'description_{self.data_type}')
            price_star_field = getattr(item, f'price_star_{self.data_type}')
            
            await callback.message.answer_invoice(
                title=name_field,
                description=description_field,
                provider_token='',
                currency="XTR",
                payload=self.data_type,
                prices=[LabeledPrice(label="XTR", amount=price_star_field)]
            )
        await callback.answer()
    
    async def successful_payment(self, message: Message, bot: Bot, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã."""
        data = await state.get_data()
        selection_id = data.get('selection_id')
        
        if not selection_id:
            await logger.error("–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç")
            return
            
        get_func = getattr(rq, f'get_{self.data_type}')
        items = await get_func(selection_id)
        
        for item in items:
            file_field = getattr(item, f'fail_{self.data_type}')
            await bot.send_document(
                chat_id=message.from_user.id,
                document=file_field,
                caption=f"{'–ì–∞–π–¥' if self.data_type == 'gaid' else '–ö—É—Ä—Å'}: {getattr(item, f'name_fail_{self.data_type}')}"
            )

        await state.clear()    
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        try:
            await bot.refund_star_payment(
                message.from_user.id,
                message.successful_payment.telegram_payment_charge_id
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –æ–ø–ª–∞—Ç—ã: {e}")
    
    async def pay_with_card(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π."""
        await callback.answer()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(client_id=callback.from_user.id)
        
        load_dotenv()
        phone = os.getenv('PHONE')
        
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {self.data_type} –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π")
        
        if self.data_type == 'gaid':
            await state.set_state(CardPayStates.successful_photo_gaid)
        else:
            await state.set_state(CardPayStates.successful_photo_kurs)

        data_name = "–≥–∞–π–¥" if self.data_type == "gaid" else "–∫—É—Ä—Å"    
        
        await callback.message.answer(
            f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ {data_name}–∞ {phone}'
        )
        await callback.message.answer(
            '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —á–µ–∫üßæ, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!\n\n'
            '–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–æ–ø"'
        )
    
    async def process_payment_photo(self, message: Message, state: FSMContext, bot: Bot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ."""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è {self.data_type}")
        
        if message.text and message.text.lower() == "—Å—Ç–æ–ø":
            await state.clear()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–ª–∞—Ç—É")
            await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.")
            return
            
        # if not message.photo:
        #     await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
        #     return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_state = await state.get_state()
        data = await state.get_data()
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è {self.data_type}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {data}")
        user_id = data.get('user_id')
        selection_id = data.get('selection_id')
        admin_id = data.get('admin_id')
        
        logger.info(f"User ID: {user_id}, Selection ID: {selection_id}, Admin ID: {admin_id}")
        
        pay_photo_check = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        try:
            if message.document: 
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ üì∏ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç</b> (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ), –∞ –Ω–µ —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç.", parse_mode='HTML')
                logger.warn("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç, –≤–µ—Ä–Ω—É–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—å–±–µ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ")
                return
            elif message.photo:
                if message.photo[-1].file_size > 5 * 1024 * 1024:
                    await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ –æ–±—Ä–µ–∂—å—Ç–µ –µ–≥–æ.")
                    return
                else:
                    pay_photo_check = message.photo[-1].file_id
                    await state.update_data(pay_photo_check=pay_photo_check)
                    logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–∂–∞—Ç–æ–µ —Ñ–æ—Ç–æ")
            else:
                await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
                return
        except (TypeError, IndexError):
            await message.answer('–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
            return
        
        await bot.send_message(chat_id=user_id, text='–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º')
        
        # –ï—Å–ª–∏ admin_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–ª—É—á–∞–µ–º –∏–∑ .env
        if not admin_id:
            load_dotenv()
            admin_id = int(os.getenv('ADMIN_ID'))
        
        keyboard = getattr(kb, f'succsefull_keyboard_{self.data_type}')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await state.update_data(
            admin_message_data={
                'client_id': user_id,
                'selection_id': selection_id,
                'data_type': self.data_type,
                'photo': pay_photo_check,
                'admin_id': admin_id 
            }
        )
        
        chekmessage = await bot.send_photo(
            chat_id=admin_id,
            caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:',
            photo=pay_photo_check,
            reply_markup=keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞
        await state.update_data(admin_message_id=chekmessage.message_id)
        
        logger.info(f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        
        # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        if self.data_type == 'gaid':
            await state.set_state(CardPayStates.successful_photo_gaid)
        else:
            await state.set_state(CardPayStates.successful_photo_kurs)
        


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
gaid_handler = OutputDataHandler('gaid')
kurs_handler = OutputDataHandler('kurs')

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥–∞–π–¥–æ–≤
@router.message(Command(commands='gaid'))
@log_user_action
async def gaid_start(message: Message, bot: Bot):
    await gaid_handler.start(message, bot)

@router.callback_query(F.data.startswith('selectgaid_'))
@log_user_action
async def gaid_select(callback: CallbackQuery, state: FSMContext):
    await gaid_handler.select(callback, state)

@router.callback_query(F.data.startswith('stars_gaid'))
@log_user_action
async def buy_gaid(callback: CallbackQuery, state: FSMContext):
    await gaid_handler.buy_with_stars(callback, state)

@router.pre_checkout_query()
async def pre_checkout_query_gaid(event: PreCheckoutQuery) -> None:
    await event.answer(ok=True)

@router.message(F.successful_payment.invoice_payload == 'gaid')
@log_user_action
async def successful_payment_gaid(message: Message, bot: Bot, state: FSMContext):
    await gaid_handler.successful_payment(message, bot, state)

@router.callback_query(F.data.startswith('cards_gaid'))
@log_user_action
async def pay_photo_check_get_gaid(callback: CallbackQuery, state: FSMContext):
    await gaid_handler.pay_with_card(callback, state)

@router.message(CardPayStates.successful_photo_gaid)
@log_user_action
async def successful_photo_gaid(message: Message, state: FSMContext, bot: Bot):
    await gaid_handler.process_payment_photo(message, state, bot)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫—É—Ä—Å–æ–≤
@router.message(Command(commands='kurs'))
@log_user_action
async def kurs_start(message: Message, bot: Bot):
    await kurs_handler.start(message, bot)

@router.callback_query(F.data.startswith('selectkurs_'))
@log_user_action
async def kurs_select(callback: CallbackQuery, state: FSMContext):
    await kurs_handler.select(callback, state)

@router.callback_query(F.data.startswith('stars_kurs'))
@log_user_action
async def buy_kurs(callback: CallbackQuery, state: FSMContext):
    await kurs_handler.buy_with_stars(callback, state)

@router.message(F.successful_payment.invoice_payload == 'kurs')
@log_user_action
async def successful_payment_kurs(message: Message, bot: Bot, state: FSMContext):
    await kurs_handler.successful_payment(message, bot, state)

@router.callback_query(F.data.startswith('cards_kurs'))
@log_user_action
async def pay_photo_check_get_kurs(callback: CallbackQuery, state: FSMContext):
    await kurs_handler.pay_with_card(callback, state)

@router.message(CardPayStates.successful_photo_kurs)
@log_user_action
async def successful_photo_kurs(message: Message, state: FSMContext, bot: Bot):
    await kurs_handler.process_payment_photo(message, state, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@router.callback_query(F.data.startswith('true_gaid'))
@log_user_action
async def Trueanswer(callback: CallbackQuery):
    await callback.answer()
    chekkeyboard = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_gaid)
    await asyncio.sleep(900)
    await chekkeyboard.delete()

@router.callback_query(F.data.startswith('false_gaid'))
@log_user_action
async def Falseanswer(callback: CallbackQuery):
    await callback.answer()
    chekkeyboard = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_false_gaid)
    await asyncio.sleep(900)
    await chekkeyboard.delete()

@router.callback_query(F.data.startswith('yes_false_gaid'))
@log_user_action
async def Confirmanswer(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    client_id = admin_data.get('client_id')
    await callback.answer()
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞  –¥–ª—è {client_id}")
    falsecheck = await callback.message.answer('–ü–æ–Ω—è–ª –≤–∞—Å! –°–æ–æ–±—â–∞—é –æ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
    await bot.send_message(chat_id=client_id, text='–ê–¥–º–∏–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –ø–ª–∞—Ç–µ–∂! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É!')
    await asyncio.sleep(900)
    await falsecheck.delete()


@router.callback_query(F.data.startswith('no_false_gaid'))
@log_user_action
async def UnConfirmanswer(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    admin = admin_data.get('admin_id')
    photo = admin_data.get('photo')

    if not admin or not photo:
        load_dotenv()
        admin = int(os.getenv('ADMIN_ID'))
        if not photo:
            photo = data.get('pay_photo_check')

    await callback.answer()
    chekmessage = await bot.send_photo(chat_id=admin, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photo, reply_markup=kb.succsefull_keyboard_gaid)
    await asyncio.sleep(900)
    await chekmessage.delete()

@router.callback_query(F.data.startswith('ok_gaid'))
@log_user_action
async def ConfirmanswerYes(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    client_id = admin_data.get('client_id')
    selection_id = admin_data.get('selection_id')
    
    if not client_id or not selection_id:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
        
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≥–∞–π–¥–∞ –¥–ª—è {client_id}")

    gaidsel = await rq.get_gaid(selection_id)
    await callback.answer()
    try:
        sendmessageg = await callback.message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é –≥–∞–π–¥ —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫—Éü•≥')
        for gaid in gaidsel:
            await bot.send_document(
                chat_id=client_id,
                document=gaid.fail_gaid,
                caption=f"–ì–∞–π–¥: {gaid.name_fail_gaid}"
            )
        logger.info(f"–ì–∞–π–¥ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω {client_id}")
    except TelegramBadRequest as e:
        await callback.message.answer('–ì–∞–π–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è...\n–û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¢–µ—Ö.–ê–¥–º–∏–Ω—É! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Ä–∞–±–æ—Ç—ã —É–∂–µ –≤–µ–¥—É—Ç—Å—è!')
        await bot.send_message(chat_id=client_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≥–∞–π–¥. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —É–∂–µ –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø—Ä–∏—à–ª–µ–º –≥–∞–π–¥, –∫–∞–∫ —Ä–µ—à–∏–º –¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É. –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!")
        logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∞–π–¥: {e}')
    await asyncio.sleep(900)
    await sendmessageg.delete()


@router.callback_query(F.data.startswith('no_gaid'))
@log_user_action
async def UnConfirmanswerno(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    admin = admin_data.get('admin_id')
    photo = admin_data.get('photo')

    if not admin or not photo:
        load_dotenv()
        admin = int(os.getenv('ADMIN_ID'))
        if not photo:
            photo = data.get('pay_photo_check')

    await callback.answer()
    chekmessage = await bot.send_photo(chat_id=admin, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photo, reply_markup=kb.succsefull_keyboard_gaid)
    await asyncio.sleep(900)
    await chekmessage.delete()


@router.callback_query(F.data.startswith('true_kurs'))
@log_user_action
async def Trueanswerkurs(callback: CallbackQuery):
    await callback.answer()
    chekkeyboardtrue = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_kurs)
    await asyncio.sleep(900)
    await chekkeyboardtrue.delete()


@router.callback_query(F.data.startswith('ok_kurs'))
@log_user_action
async def ConfirmanswerYeskurs(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    client_id = admin_data.get('client_id')
    selection_id = admin_data.get('selection_id')
    
    if not client_id or not selection_id:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    await callback.answer()
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫—É—Ä—Å–∞ –¥–ª—è {client_id}")
    kurssel = await rq.get_kurs(selection_id)
    try:
        sendmessagek = await callback.message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é –∫—É—Ä—Å —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫—Éü•≥')
        for kurs in kurssel:
            await bot.send_document(
                chat_id=client_id,
                document=kurs.fail_kurs,
                caption=f"–ö—É—Ä—Å: {kurs.name_fail_kurs}"
            )
        logger.info(f"–ö—É—Ä—Å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω {client_id}")
    except TelegramBadRequest as e:
        sendmessageerror = await callback.message.answer('–ö—É—Ä—Å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è...\n–û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¢–µ—Ö.–ê–¥–º–∏–Ω—É! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Ä–∞–±–æ—Ç—ã —É–∂–µ –≤–µ–¥—É—Ç—Å—è!')
        await bot.send_message(chat_id=client_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫—É—Ä—Å. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —É–∂–µ –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø—Ä–∏—à–ª–µ–º –∫—É—Ä—Å, –∫–∞–∫ —Ä–µ—à–∏–º –¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É. –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!")
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—É—Ä—Å: {e} -> –ü–æ—Ö–æ–¥—É –æ–ø—è—Ç—å file_id —É—Å—Ç–∞—Ä–µ–ª...\n–ê–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞:{client_id}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:{kurs.name_fail_kurs}\n–ï–≥–æ —Ç–æ–≤–∞—Ä:{kurs.fail_kurs}')
    await asyncio.sleep(900)
    await sendmessagek.delete()
    await sendmessageerror.delete()
    await state.clear()

@router.callback_query(F.data.startswith('false_kurs'))
@log_user_action
async def Falseanswerkurs(callback: CallbackQuery):
    await callback.answer()
    chekkeyboardfalse = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_false_kurs)
    await asyncio.sleep(900)
    await chekkeyboardfalse.delete()

@router.callback_query(F.data.startswith('yes_false_kurs'))
@log_user_action
async def Confirmanswerkurs(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    client_id = admin_data.get('client_id')
    await callback.answer()
    await state.clear()
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ –ø–µ—Ä–µ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞  –¥–ª—è {client_id}")
    falsecheckyesfalse = await callback.message.answer('–ü–æ–Ω—è–ª –≤–∞—Å! –°–æ–æ–±—â–∞—é –æ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
    await bot.send_message(chat_id=client_id, text='–ê–¥–º–∏–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –ø–ª–∞—Ç–µ–∂! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É!')
    await asyncio.sleep(900)
    await falsecheckyesfalse.delete()


@router.callback_query(F.data.startswith('no_false_kurs'))
@log_user_action
async def UnConfirmanswerkurs(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    admin = admin_data.get('admin_id')
    photo = admin_data.get('photo')

    if not admin or not photo:
        load_dotenv()
        admin = int(os.getenv('ADMIN_ID'))
        if not photo:
            photo = data.get('pay_photo_check')

    await callback.answer()
    chekmessagenofalse = await bot.send_photo(chat_id=admin, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photo, reply_markup=kb.succsefull_keyboard_kurs)
    await asyncio.sleep(900)
    await chekmessagenofalse.delete()


@router.callback_query(F.data.startswith('no_kurs'))
@log_user_action
async def UnConfirmanswernokurs(callback: CallbackQuery, bot: Bot, state: FSMContext):
    data = await state.get_data()
    admin_data = data.get('admin_message_data', {})
    admin = admin_data.get('admin_id')
    photo = admin_data.get('photo')

    if not admin or not photo:
        load_dotenv()
        admin = int(os.getenv('ADMIN_ID'))
        if not photo:
            photo = data.get('pay_photo_check')

    await callback.answer()
    chekmessage = await bot.send_photo(chat_id=admin, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photo, reply_markup=kb.succsefull_keyboard_kurs)
    await asyncio.sleep(900)
    await chekmessage.delete()

@router.message()
@log_user_action
async def log_all_messages(message: Message):
    logger.debug(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")


@router.message(Command(commands=['gaid', 'kurs']))
async def cancel_any_state(message: Message, state: FSMContext):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ {message.text}")
    if message.text == '/gaid':
        await gaid_start(message, Bot.get_current())
    elif message.text == '/kurs':
        await kurs_start(message, Bot.get_current())
