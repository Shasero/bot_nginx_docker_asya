import logging 
from logging.handlers import RotatingFileHandler
import json
from aiogram import F, Router, html, Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dotenv import load_dotenv
import asyncio
import time
import os
import transliterate
from datetime import datetime, timezone 


import keyboards.keyboard as kb
import database.requests as rq


class JsonFormatter(logging.Formatter):
    def format(self, record):
        log_record = {
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "level": record.levelname,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "user_id": getattr(record, 'user_id', None),
            "extra": getattr(record, 'extra', {})
        }
        if record.exc_info:
            log_record["exception"] = self.formatException(record.exc_info)
        return json.dumps(log_record, ensure_ascii=False)

def setup_logger():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)

    os.makedirs('logs', exist_ok=True)
    
    # –†–æ—Ç–∞—Ü–∏—è –ª–æ–≥–æ–≤ (10 MB, 3 —Ñ–∞–π–ª–∞)
    file_handler = RotatingFileHandler(
        'logs/gaid_handler.log',
        maxBytes=10*1024*1024,
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(JsonFormatter())
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(JsonFormatter())
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    return logger

logger = setup_logger()


router = Router()
gaid_selections = {}
kurs_selections = {}
getgaid = None


def log_user_action(func):
    async def wrapper(*args, **kwargs):
        filtered_kwargs = {k: v for k, v in kwargs.items() if k in func.__annotations__}
        message_or_callback = args[0]
        user_id = getattr(message_or_callback.from_user, 'id', None)
        extra = {'user_id': user_id}
        
        logger.info(f"Start {func.__name__}", extra={'extra': extra})
        start_time = time.time()
        
        try:
            result = await func(*args, **filtered_kwargs)
            exec_time = time.time() - start_time
            logger.info(f"Completed {func.__name__} in {exec_time:.2f}s",
                      extra={'extra': {**extra, 'exec_time': exec_time}})
            return result
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {str(e)}", exc_info=True,
                       extra={'extra': extra})
            raise
    return wrapper



# –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON
DATA_FILE_GAID = "gaid_data.json"

# –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ JSON (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
def load_data_gaid():
    if os.path.exists(DATA_FILE_GAID):
        with open(DATA_FILE_GAID, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –∏–∑ {DATA_FILE_GAID}. –ù–∞—á–∏–Ω–∞—è —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
                return {}
    else:
        return {}

# –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
def save_data_gaid(data_gaid):
    with open(DATA_FILE_GAID, "w") as f:
        json.dump(data_gaid, f, indent=4)


def transliterate_filename(filename):
    "–¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π."
    try:
        return transliterate.translit(filename, 'ru', reversed=True)
    except transliterate.exceptions.TranslitException:
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é '{filename}', –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è.")
        return filename

@router.message(Command(commands='gaid'))
@log_user_action
async def gaid_start(message: Message, bot: Bot, **kwargs):
    if(await rq.proverka_gaids() == None):
        logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–∞–π–¥–æ–≤")
        await bot.send_message(message.from_user.id,'–ü–æ–∫–∞ –≥–∞–π–¥–æ–≤ –Ω–µ—Ç')
    else:
        logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–∞–π–¥–∞–º–∏")
        await bot.send_message(message.from_user.id,'üìñ–ì–∞–π–¥—ã: ',reply_markup=await kb.selectkeyboardgaid())


@router.callback_query(F.data.startswith('selectgaid_'))
@log_user_action
async def gaidselect(callback: CallbackQuery,  **kwargs):
    start_time = time.time()
    end_time = start_time + 15 * 60
    await callback.answer('')
    p = []
    user_name = callback.from_user.full_name
    getgaidselect = callback.data.split('_')[1]
    global getgaid
    getgaid = getgaidselect
    # selectintgaid = int(select)

    data_gaid = load_data_gaid()

    if str(user_name) not in data_gaid:
        data_gaid[str(user_name)] = []
    
    gaidsel = await rq.get_gaid(getgaid)
    logger.debug(f"Retrieved guide data: {getgaid}")
    
    for gaid in gaidsel:
        transliterated_filename = transliterate_filename(gaid.namefail)

        if transliterated_filename not in data_gaid[str(user_name)]:
          data_gaid[str(user_name)].append(transliterated_filename)

    save_data_gaid(data_gaid)

    while start_time < end_time:
        
        if user_name not in gaid_selections:
            gaid_selections[user_name] = []

        if getgaidselect not in gaid_selections[user_name]:
            gaid_selections[user_name].append(getgaidselect)
        p.append(gaid_selections)
        break

    await callback.message.answer_photo(f'{gaid.photo}')
    await callback.message.answer(
        f'{html.bold("–ì–∞–π–¥:")} {gaid.namefail}\n'
        f'{html.bold("–û–ø–∏—Å–∞–Ω–∏–µ:")} {gaid.descriptiongaid}\n'
        f'{html.bold("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö:")} {gaid.pricecardgaid}\n'
        f'{html.bold("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –∑–≤–µ–∑–¥–∞—Ö:")} {gaid.pricestargaid}', 
        reply_markup=kb.payment_keyboard_gaid
    )


@router.callback_query(F.data.startswith('stars_gaid'))
async def buygaid(callback: CallbackQuery):
    gaidsel = await rq.get_gaid(getgaid)
    for gaid in gaidsel:
        namefail = gaid.namefail
        descriptiongaid = gaid.descriptiongaid
        pricestar = gaid.pricestargaid

    await callback.message.answer_invoice(
            title=namefail,
            description=descriptiongaid,
            provider_token='',
            currency="XTR",
            payload='gaids',
            prices=[LabeledPrice(label="XTR", amount=pricestar)]
    )
    await callback.answer()

@router.pre_checkout_query()
async def pre_checkout_querygaid(event: PreCheckoutQuery) -> None:
    await event.answer(ok=True)


@router.message(F.successful_payment.invoice_payload == 'gaids')
async def successful_paymentgaid(message: Message, bot: Bot) -> None:
    gaidsel = await rq.get_gaid(getgaid)
    for gaid in gaidsel:
        await message.answer_document(gaid.fail)
    await bot.refund_star_payment(message.from_user.id, message.successful_payment.telegram_payment_charge_id)


load_dotenv()

admin_id = os.getenv('ADMIN_ID')
intadmin_id = int(admin_id)
phone = os.getenv('PHONE')


class Card_Pay_gaid(StatesGroup):
    successful_photo_gaid = State()
photog = None
clientidgaid = None


@router.callback_query(F.data.startswith('cards_gaid'))
async def payphotocheckget(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    global clientidgaid
    infopokup = callback.from_user.id
    clientidgaid = infopokup
    if callback.message.text != "—Å—Ç–æ–ø":
        await state.set_state(Card_Pay_gaid.successful_photo_gaid)
        await callback.message.answer(f'–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≥–∞–π–¥–∞ {phone}')
        await callback.message.answer('–ü—Ä–µ–∫—Ä–∏–ø–∏—Ç–µ —á–µ–∫üßæ, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!\n\n–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∞–ª–∏ –Ω–µ –Ω–∞ —Ç—É –∫–Ω–æ–ø–∫—É, –Ω–∞–ø–∏—à–∏—Ç–µ "—Å—Ç–æ–ø"')
    else:
        await state.clear()


@router.message(Card_Pay_gaid.successful_photo_gaid)
async def successfulphoto(message: Message, state: FSMContext, bot: Bot):
    try:
        if message.text != "—Å—Ç–æ–ø":
            if not message.photo:
                await message.answer('–ü—Ä–µ–∫—Ä–∏–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤–∞—à–µ–≥–æ —á–µ–∫–∞ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')
                return
            else:
                await state.update_data(payphotocheck=message.photo[-1].file_id)
                await bot.send_message(chat_id=clientidgaid, text='–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º')
                data = await state.get_data()
                global photog
                payphotocheck = data.get('payphotocheck')
                photog = payphotocheck
                chekmessage = await bot.send_photo(chat_id=intadmin_id, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=payphotocheck, reply_markup=kb.succsefull_keyboard_gaid)
                await state.clear()
                await asyncio.sleep(900)
                await chekmessage.delete()
        else:
            await state.clear()
    except Exception as e:
        logging.error(f"Error in successfulphoto: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.callback_query(F.data.startswith('true_gaid'))
async def Trueanswer(callback: CallbackQuery):
    await callback.answer()
    chekkeyboard = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_gaid)
    await asyncio.sleep(900)
    await chekkeyboard.delete()

@router.callback_query(F.data.startswith('false_gaid'))
async def Falseanswer(callback: CallbackQuery):
    await callback.answer()
    chekkeyboard = await callback.message.answer('–í—ã —Ç–æ—á–Ω–æ –≤—Å–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏?', reply_markup=kb.confirmation_false_gaid)
    await asyncio.sleep(900)
    await chekkeyboard.delete()

@router.callback_query(F.data.startswith('yes_false_gaid'))
async def Confirmanswer(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    falsecheck = await callback.message.answer('–ü–æ–Ω—è–ª –≤–∞—Å! –°–æ–æ–±—â–∞—é –æ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!')
    await bot.send_message(chat_id=clientidgaid, text='–ê–¥–º–∏–Ω –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à –ø–ª–∞—Ç–µ–∂! –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É!')
    await asyncio.sleep(900)
    await falsecheck.delete()


@router.callback_query(F.data.startswith('no_false_gaid'))
async def UnConfirmanswer(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    chekmessage = await bot.send_photo(chat_id=intadmin_id, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photog, reply_markup=kb.succsefull_keyboard_gaid)
    await asyncio.sleep(900)
    await chekmessage.delete()

@router.callback_query(F.data.startswith('ok_gaid'))
@log_user_action
async def ConfirmanswerYes(callback: CallbackQuery, bot: Bot, **kwargs):
    gaidsel = await rq.get_gaid(getgaid)
    await callback.answer()
    try:
        sendmessageg = await callback.message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é –≥–∞–π–¥ —Å—á–∞—Å—Ç–ª–∏–≤—á–∏–∫—Éü•≥')
        for gaid in gaidsel:
            await bot.send_document(
                chat_id=clientidgaid,
                document=gaid.fail,
                caption=f"–ì–∞–π–¥: {gaid.namefail}"
            )
        logger.info(f"–ì–∞–π–¥ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω {clientidgaid}")
    except TelegramBadRequest as e:
        await callback.message.answer('–ì–∞–π–¥ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è...\n–û—à–∏–±–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¢–µ—Ö.–ê–¥–º–∏–Ω—É! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, —Ä–∞–±–æ—Ç—ã —É–∂–µ –≤–µ–¥—É—Ç—Å—è!')
        await bot.send_message(chat_id=clientidgaid, text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≥–∞–π–¥. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —É–∂–µ –Ω–∞–¥ —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –ø—Ä–∏—à–ª–µ–º –≥–∞–π–¥, –∫–∞–∫ —Ä–µ—à–∏–º –¥–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É. –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!")
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–∞–π–¥: {e} -> –ü–æ—Ö–æ–¥—É –æ–ø—è—Ç—å file_id —É—Å—Ç–∞—Ä–µ–ª...\n–ê–π–¥–∏ –∫–ª–∏–µ–Ω—Ç–∞:{clientidgaid}\n–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:{gaid.namefail}\n–ï–≥–æ —Ç–æ–≤–∞—Ä:{gaid.fail}')
    await asyncio.sleep(900)
    await sendmessageg.delete()


@router.callback_query(F.data.startswith('no_gaid'))
async def UnConfirmanswerno(callback: CallbackQuery, bot: Bot):
    await callback.answer()
    chekmessage = await bot.send_photo(chat_id=intadmin_id, caption='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:', photo=photog, reply_markup=kb.succsefull_keyboard_gaid)
    await asyncio.sleep(900)
    await chekmessage.delete()