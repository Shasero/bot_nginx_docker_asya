from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import logging
import sqlite3
from datetime import datetime

import database.requests as rq

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_PHOTO_SIZE_MB = 5
MAX_FILE_SIZE_MB = 20
MIN_PRICE = 0
MAX_PRICE = 100000

class AddGaid(StatesGroup):
    namefail = State()
    photo = State()
    descriptiongaid = State()
    fail = State()
    pricecardgaid = State()
    pricestargaid = State()


@router.callback_query(F.data.startswith('keyboardaddgaid'))
async def addpole(callback: CallbackQuery, state: FSMContext, bot: Bot):
    try:
        chat_id = callback.from_user.id
        last_message_id = callback.message.message_id
        await callback.answer()
        await callback.message.edit_reply_markup(reply_markup=None)
        await bot.delete_message(chat_id=chat_id, message_id=last_message_id)
        await state.set_state(AddGaid.namefail)
        await callback.message.answer('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞:')
    except Exception as e:
        logging.error(f"Error in addpole: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(AddGaid.namefail)
async def addnamefail(message: Message, state: FSMContext, bot: Bot):
    try:
        if not message.text or len(message.text.strip()) < 3:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        existing_gaid = await rq.get_gaid(message.text.strip())
        if existing_gaid and existing_gaid.first() is not None:
            await message.answer("‚ö†Ô∏è –ì–∞–π–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
            return
            
        await state.update_data(namefail=message.text.strip())
        await state.set_state(AddGaid.photo)
        await message.answer("üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≥–∞–π–¥–∞ (–º–∞–∫—Å. 5MB):")
    except Exception as e:
        logging.error(f"Error in addnamefail: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(AddGaid.photo)
async def addphoto(message: Message, state: FSMContext, bot: Bot):
    try:
        if not message.photo:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
            return
        
        photo = message.photo[-1]  # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        photo_size_mb = photo.file_size / (1024 * 1024) if photo.file_size else 0
        if photo_size_mb > MAX_PHOTO_SIZE_MB:
            await message.answer(
                f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({photo_size_mb:.1f}MB). "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_PHOTO_SIZE_MB}MB."
            )
            return
        
        await state.update_data(photo=photo.file_id)
        await state.set_state(AddGaid.descriptiongaid)
        await message.answer(
            f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! (–†–∞–∑–º–µ—Ä: {photo_size_mb:.1f}MB)\n"
            "üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–∞–π–¥–∞:"
        )
    except Exception as e:
        logging.error(f"Error in addphoto: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(AddGaid.descriptiongaid)
async def adddescriptiongaid(message: Message, state: FSMContext, bot: Bot):
    try:
        if not message.text or len(message.text.strip()) < 10:
            await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
            
        await state.update_data(descriptiongaid=message.text.strip())
        await state.set_state(AddGaid.fail)
        await message.answer(
            "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≥–∞–π–¥–∞ (–º–∞–∫—Å. 20MB):\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, Word (docx/doc), —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã."
        )
    except Exception as e:
        logging.error(f"Error in adddescriptiongaid: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(AddGaid.fail, ~F.document)
async def handle_wrong_content_type(message: Message):
    await message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
        "–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª, –Ω–æ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ \"–î–æ–∫—É–º–µ–Ω—Ç\"\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª"
    )


@router.message(AddGaid.fail)
async def addfail(message: Message, state: FSMContext, bot: Bot):
    try:
        if not hasattr(message, 'document') or message.document is None:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é \"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å\" -> \"–î–æ–∫—É–º–µ–Ω—Ç\"\n"
                "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª, –Ω–æ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                "–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."
            )
            return

        document = message.document
        required_attrs = ['file_id', 'file_name', 'mime_type', 'file_size']
        
        if not all(hasattr(document, attr) for attr in required_attrs):
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
            return

        allowed_types = [
            'application/pdf',
            'application/vnd.openxmlformats-officedocument',
            'application/msword',
            'text/plain'
        ]
        
        if not document.mime_type or not any(document.mime_type.startswith(t) for t in allowed_types):
            await message.answer(
                "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                f"–ü–æ–ª—É—á–µ–Ω: {document.mime_type or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, Word (docx/doc), —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã."
            )
            return
        
        max_size = MAX_FILE_SIZE_MB * 1024 * 1024
        if not document.file_size or document.file_size > max_size:
            await message.answer(
                f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –†–∞–∑–º–µ—Ä: {document.file_size or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –±–∞–π—Ç\n"
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_FILE_SIZE_MB}MB"
            )
            return
        
        file_info = {
            'file_id': document.file_id,
            'file_name': document.file_name,
            'file_size': document.file_size,
            'mime_type': document.mime_type,
            'date': message.date.isoformat()
        }
        
        await state.update_data(fail=file_info)
        await state.set_state(AddGaid.pricecardgaid)
        
        file_size_mb = document.file_size / (1024 * 1024)
        await message.answer(
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n"
            f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {document.file_name}\n"
            f"üì¶ –¢–∏–ø: {document.mime_type}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f}MB\n\n"
            "üí≥ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≥–∞–π–¥–∞ –≤ —Ä—É–±–ª—è—Ö:"
        )
        
    except Exception as e:
        logging.error(f"Document processing error: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
            "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
            "2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)\n"
            "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª\n\n"
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {type(e).__name__}"
        )


@router.message(AddGaid.pricecardgaid)
async def addpricecardgaid(message: Message, state: FSMContext, bot: Bot):
    try:
        price = message.text.strip()
        
        if not price.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
            return
            
        price = int(price)
        if price < MIN_PRICE or price > MAX_PRICE:
            await message.answer(
                f"‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {MIN_PRICE} –¥–æ {MAX_PRICE} —Ä—É–±–ª–µ–π.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
            )
            return
            
        await state.update_data(pricecardgaid=str(price))
        await state.set_state(AddGaid.pricestargaid)
        await message.answer(
            f"‚úÖ –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {price}‚ÇΩ\n"
            "‚≠ê –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≥–∞–π–¥–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö:"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ addpricecardgaid: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(AddGaid.pricestargaid)
async def addpricestargaid(message: Message, state: FSMContext, bot: Bot):
    try:
        stars = message.text.strip()
        
        if not stars.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
            return
            
        stars = int(stars)
        if stars < MIN_PRICE or stars > MAX_PRICE:
            await message.answer(
                f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {MIN_PRICE} –¥–æ {MAX_PRICE}.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
            )
            return
        
        data = await state.get_data()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        required_fields = {
            'namefail': "–ù–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞",
            'photo': "–§–æ—Ç–æ –≥–∞–π–¥–∞",
            'descriptiongaid': "–û–ø–∏—Å–∞–Ω–∏–µ –≥–∞–π–¥–∞",
            'fail': "–§–∞–π–ª –≥–∞–π–¥–∞",
            'pricecardgaid': "–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö"
        }
        
        missing_fields = []
        for field, name in required_fields.items():
            if field not in data or not data[field]:
                missing_fields.append(name)
        
        if missing_fields:
            error_msg = "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n- " + "\n- ".join(missing_fields)
            logging.error(f"Missing data in state: {missing_fields}")
            await message.answer(f"‚ùå {error_msg}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º file_id –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        file_info = data.get('fail', {})
        file_id = file_info.get('file_id') if isinstance(file_info, dict) else file_info
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
        try:
            await rq.addgaid(
                namefail=data['namefail'],
                photo=data['photo'],
                descriptiongaid=data['descriptiongaid'],
                fail=file_id,
                pricecardgaid=data['pricecardgaid'],
                pricestargaid=str(stars),
                created_at=datetime.now().isoformat()
            )
            
            await message.answer(
                "‚úÖ –ì–∞–π–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['namefail']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['descriptiongaid'][:50]}...\n"
                f"üí≥ –¶–µ–Ω–∞: {data['pricecardgaid']}‚ÇΩ\n"
                f"‚≠ê –ó–≤—ë–∑–¥—ã: {stars}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞!"
            )
            await state.clear()
            
        except sqlite3.IntegrityError as e:
            logging.error(f"Database integrity error: {e}")
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞: –≥–∞–π–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
            )
            await state.clear()
            
    except sqlite3.ProgrammingError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ addpricestargaid: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    except Exception as e:
        logging.error(f"Error in addpricestargaid: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()