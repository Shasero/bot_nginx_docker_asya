from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import logging
import sys
import sqlite3

import database.requests as rq

router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("add_data.log", encoding='utf-8'),
        logging.StreamHandler(sys.stdout)  
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
MAX_PHOTO_SIZE_MB = 5
MAX_FILE_SIZE_MB = 20
MIN_PRICE = 0
MAX_PRICE = 100000

class AddDataStates(StatesGroup):
    name = State()
    photo = State()
    description = State()
    file = State() 
    price_card = State()
    price_star = State()

class DataType:
    GAID = "gaid"
    KURS = "kurs"

class DataHandler:
    def __init__(self, data_type: str):
        self.data_type = data_type
        self.states = AddDataStates
        self.max_photo_size = MAX_PHOTO_SIZE_MB
        self.max_file_size = MAX_FILE_SIZE_MB
        self.min_price = MIN_PRICE
        self.max_price = MAX_PRICE
        
    async def start_adding(self, callback: CallbackQuery, state: FSMContext, bot: Bot):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"[START] –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {self.data_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            await state.update_data(data_type=self.data_type)
            chat_id = callback.from_user.id
            last_message_id = callback.message.message_id
            
            await callback.answer()
            await callback.message.edit_reply_markup(reply_markup=None)
            await bot.delete_message(chat_id=chat_id, message_id=last_message_id)
            await state.set_state(self.states.name)
            
            text_map = {
                DataType.GAID: 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∞–π–¥–∞:',
                DataType.KURS: 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞:'
            }
            message_text = text_map[self.data_type]
            print(message_text)
            logger.info(f"[SEND] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {message_text}")
            await callback.message.answer(message_text)
            
        except Exception as e:
            error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –≤ start_adding –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def process_name(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è"""
        try:
            logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è {self.data_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            if not message.text or len(message.text.strip()) < 3:
                warn_msg = "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
                logger.warning(warn_msg)
                await message.answer(warn_msg)
                return
            
            name = message.text.strip()
            logger.info(f"[CHECK] –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è: {name}")
            
            try:
                if self.data_type == DataType.GAID:
                    existing_data = await rq.get_gaid(name)
                else:
                    existing_data = await rq.get_kurs(name)
                    
                if existing_data is None:
                    error_msg = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è."
                    logger.error(error_msg)
                    await message.answer(error_msg)
                    return
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∫—É—Ä—Å/–≥–∞–π–¥
                try:
                    existing_items = list(existing_data)
                    if existing_items:
                        warn_msg = f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."
                        logger.warning(warn_msg)
                        await message.answer(warn_msg)
                        return
                except Exception as e:
                    error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
                    logger.error(error_msg, exc_info=True)
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return
                    
            except Exception as db_error:
                error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {str(db_error)}"
                logger.error(error_msg, exc_info=True)
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
                
            await state.update_data(name=name)
            await state.set_state(self.states.photo)
            
            text_map = {
                DataType.GAID: "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –≥–∞–π–¥–∞ (–º–∞–∫—Å. 5MB):",
                DataType.KURS: "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∫—É—Ä—Å–∞ (–º–∞–∫—Å. 5MB):"
            }
            next_msg = text_map[self.data_type]
            logger.info(f"[NEXT] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'photo'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {next_msg}")
            await message.answer(next_msg)
            
        except Exception as e:
            error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –≤ process_name –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∑–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    async def process_photo(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ"""
        try:
            logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è {self.data_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            if not message.photo:
                warn_msg = "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ."
                logger.warning(warn_msg)
                await message.answer(warn_msg)
                return
            
            photo = message.photo[-1]
            photo_size_mb = photo.file_size / (1024 * 1024) if photo.file_size else 0
            logger.info(f"[PHOTO] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ. –†–∞–∑–º–µ—Ä: {photo_size_mb:.1f}MB")
            
            if photo_size_mb > self.max_photo_size:
                warn_msg = f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({photo_size_mb:.1f}MB). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.max_photo_size}MB."
                logger.warning(warn_msg)
                await message.answer(warn_msg)
                return
            
            await state.update_data(photo=photo.file_id)
            await state.set_state(self.states.description)
            
            text_map = {
                DataType.GAID: f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! (–†–∞–∑–º–µ—Ä: {photo_size_mb:.1f}MB)\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥–∞–π–¥–∞:",
                DataType.KURS: f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! (–†–∞–∑–º–µ—Ä: {photo_size_mb:.1f}MB)\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞:"
            }
            next_msg = text_map[self.data_type]
            logger.info(f"[NEXT] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'description'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {next_msg}")
            await message.answer(next_msg)
            
        except Exception as e:
            error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –≤ process_photo –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    async def process_description(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        try:
            logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è {self.data_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            if not message.text or len(message.text.strip()) < 10:
                warn_msg = "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤."
                logger.warning(warn_msg)
                await message.answer(warn_msg)
                return
                
            description = message.text.strip()
            logger.info(f"[DESC] –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ. –î–ª–∏–Ω–∞: {len(description)} —Å–∏–º–≤–æ–ª–æ–≤")
            await state.update_data(description=description)
            await state.set_state(self.states.file)
            
            text_map = {
                DataType.GAID: "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≥–∞–π–¥–∞ (–º–∞–∫—Å. 20MB):\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, Word (docx/doc), —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã.",
                DataType.KURS: "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫—É—Ä—Å–∞ (–º–∞–∫—Å. 20MB):\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, Word (docx/doc), —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã."
            }
            next_msg = text_map[self.data_type]
            logger.info(f"[NEXT] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'file'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {next_msg}")
            await message.answer(next_msg)
            
        except Exception as e:
            error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –≤ process_description –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    @router.message(AddDataStates.file, ~F.document)
    async def handle_wrong_content_type(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞"""
        warn_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ñ–∞–π–ª–∞"
        logger.warning(warn_msg)
        await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
            "–ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª, –Ω–æ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–∫—Ä–µ–ø–∫—É –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ \"–î–æ–∫—É–º–µ–Ω—Ç\"\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª"
        )

    async def process_file(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è {self.data_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            if not hasattr(message, 'document') or message.document is None:
                warn_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç"
                logger.warning(warn_msg)
                await message.answer(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é \"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å\" -> \"–î–æ–∫—É–º–µ–Ω—Ç\"\n"
                    "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª, –Ω–æ –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
                    "–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."
                )
                return

            document = message.document
            required_attrs = ['file_id', 'file_name', 'mime_type', 'file_size']
            logger.info(f"[FILE] –ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {document.file_name} ({document.mime_type})")
            
            if not all(hasattr(document, attr) for attr in required_attrs):
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"
                logger.error(error_msg)
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
                return

            allowed_types = [
                'application/pdf',
                'application/vnd.openxmlformats-officedocument',
                'application/msword',
                'text/plain'
            ]
            
            if not document.mime_type or not any(document.mime_type.startswith(t) for t in allowed_types):
                warn_msg = f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {document.mime_type or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}"
                logger.warning(warn_msg)
                await message.answer(
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.\n"
                    f"–ü–æ–ª—É—á–µ–Ω: {document.mime_type or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: PDF, Word (docx/doc), —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã."
                )
                return
            
            max_size = self.max_file_size * 1024 * 1024
            if not document.file_size or document.file_size > max_size:
                warn_msg = f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –†–∞–∑–º–µ—Ä: {document.file_size or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –±–∞–π—Ç"
                logger.warning(warn_msg)
                await message.answer(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –†–∞–∑–º–µ—Ä: {document.file_size or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –±–∞–π—Ç\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.max_file_size}MB"
                )
                return
            
            file_info = {
                'file_id': document.file_id,
                'file_name': document.file_name,
                'file_size': document.file_size,
                'mime_type': document.mime_type,
                'date': message.date.isoformat()
            }
            
            logger.info(f"[SAVE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {file_info}")
            await state.update_data(file=file_info)
            await state.set_state(self.states.price_card)
            
            file_size_mb = document.file_size / (1024 * 1024)
            next_msg = (
                f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n"
                f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: {document.file_name}\n"
                f"üì¶ –¢–∏–ø: {document.mime_type}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f}MB\n\n"
                "üí≥ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:"
            )
            logger.info(f"[NEXT] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'price_card'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {next_msg}")
            await message.answer(next_msg)
            
        except Exception as e:
            error_msg = f"[ERROR] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.answer(
                "‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
                "2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)\n"
                "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª\n\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {type(e).__name__}"
            )

    async def process_price_card(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö"""
        try:
            logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è {self.data_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
            price = message.text.strip()
            logger.info(f"[PRICE] –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞: {price}")
            
            if not price.isdigit():
                warn_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–µ —Ü–∏—Ñ—Ä—ã)"
                logger.warning(warn_msg)
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
                return
                
            price = int(price)
            if price < self.min_price or price > self.max_price:
                warn_msg = f"–¶–µ–Ω–∞ {price} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({self.min_price}-{self.max_price})"
                logger.warning(warn_msg)
                await message.answer(
                    f"‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç {self.min_price} –¥–æ {self.max_price} —Ä—É–±–ª–µ–π.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
                )
                return
                
            await state.update_data(price_card=str(price))
            await state.set_state(self.states.price_star)
            
            text_map = {
                DataType.GAID: f"‚úÖ –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {price}‚ÇΩ\n‚≠ê –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≥–∞–π–¥–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö:",
                DataType.KURS: f"‚úÖ –¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö: {price}‚ÇΩ\n‚≠ê –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∫—É—Ä—Å–∞ –≤ –∑–≤–µ–∑–¥–∞—Ö:"
            }
            next_msg = text_map[self.data_type]
            logger.info(f"[NEXT] –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'price_star'. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {next_msg}")
            await message.answer(next_msg)
            
        except Exception as e:
            error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –≤ process_price_card –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    async def process_price_star(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –≤ –∑–≤–µ–∑–¥–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = await state.get_data()
            logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –≤ –∑–≤–µ–∑–¥–∞—Ö –¥–ª—è {self.data_type}. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
            
            stars = message.text.strip()
            logger.info(f"[STARS] –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: {stars}")
            
            if not stars.isdigit():
                warn_msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (–Ω–µ —Ü–∏—Ñ—Ä—ã)"
                logger.warning(warn_msg)
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ –∑–≤—ë–∑–¥–∞—Ö (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
                return
                
            stars = int(stars)
            if stars < self.min_price or stars > self.max_price:
                warn_msg = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ {stars} –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ({self.min_price}-{self.max_price})"
                logger.warning(warn_msg)
                await message.answer(
                    f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç {self.min_price} –¥–æ {self.max_price}.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = {
                'name': "–ù–∞–∑–≤–∞–Ω–∏–µ",
                'photo': "–§–æ—Ç–æ",
                'description': "–û–ø–∏—Å–∞–Ω–∏–µ",
                'file': "–§–∞–π–ª",
                'price_card': "–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö"
            }
            
            missing_fields = []
            for field, name in required_fields.items():
                if field not in data or not data[field]:
                    missing_fields.append(name)
            
            if missing_fields:
                error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {missing_fields}"
                logger.error(error_msg)
                await message.answer(f"‚ùå {error_msg}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            try:
                file_info = data.get('file', {})
                file_id = file_info.get('file_id') if isinstance(file_info, dict) else file_info
                
                if self.data_type == DataType.GAID:
                    logger.info(f"[SAVE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∞–π–¥–∞ –≤ –ë–î: {data['name']}")
                    await rq.add_gaid(
                        name_fail_gaid=data['name'],
                        photo_gaid=data['photo'],
                        description_gaid=data['description'],
                        fail_gaid=file_id,
                        price_card_gaid=data['price_card'],
                        price_star_gaid=str(stars)
                    )
                    success_msg = (
                        "‚úÖ –ì–∞–π–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:50]}...\n"
                        f"üí≥ –¶–µ–Ω–∞: {data['price_card']}‚ÇΩ\n"
                        f"‚≠ê –ó–≤—ë–∑–¥—ã: {stars}\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–∞–π–¥–∞!"
                    )
                else:
                    logger.info(f"[SAVE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤ –ë–î: {data['name']}")
                    await rq.add_kurs(
                        name_fail_kurs=data['name'],
                        photo_kurs=data['photo'],
                        description_kurs=data['description'],
                        fail_kurs=file_id,  
                        price_card_kurs=data['price_card'],
                        price_star_kurs=str(stars)
                    )
                    success_msg = (
                        "‚úÖ –ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
                        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description'][:50]}...\n"
                        f"üí≥ –¶–µ–Ω–∞: {data['price_card']}‚ÇΩ\n"
                        f"‚≠ê –ó–≤—ë–∑–¥—ã: {stars}\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞!"
                    )
                
                logger.info(f"[SUCCESS] –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {self.data_type}")
                await message.answer(success_msg)
                await state.clear()
                
            except sqlite3.IntegrityError as e:
                error_msg = f"[ERROR] –û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {self.data_type}: {str(e)}"
                logger.error(error_msg, exc_info=True)
                await message.answer(
                    "‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
                )
                await state.clear()
                
        except sqlite3.ProgrammingError as e:
            error_msg = f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î –≤ process_price_star –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
        except Exception as e:
            error_msg = f"[ERROR] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_price_star –¥–ª—è {self.data_type}: {str(e)}"
            logger.error(error_msg, exc_info=True)
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –≥–∞–π–¥–æ–≤ –∏ –∫—É—Ä—Å–æ–≤
gaid_handler = DataHandler(DataType.GAID)
kurs_handler = DataHandler(DataType.KURS)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≥–∞–π–¥–æ–≤
@router.callback_query(F.data.startswith('keyboardaddgaid'))
async def add_gaid(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(f"[START] –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–∞–π–¥–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}")
    await state.update_data(data_type=DataType.GAID)  
    await gaid_handler.start_adding(callback, state, bot)


@router.callback_query(F.data.startswith('keyboardaddkurs'))
async def add_kurs(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logger.info(f"[START] –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.id}")
    await state.update_data(data_type=DataType.KURS)
    await kurs_handler.start_adding(callback, state, bot)


@router.message(AddDataStates.name, F.text)
async def add_gaid_name(message: Message, state: FSMContext):
    data = await state.get_data()
    logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    if data.get('data_type') == DataType.GAID:
        await gaid_handler.process_name(message, state)
    elif data.get('data_type') == DataType.KURS:
        await kurs_handler.process_name(message, state)

@router.message(AddDataStates.photo, F.photo)
async def add_gaid_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–∞–Ω–Ω—ã—Ö. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    if data.get('data_type') == DataType.GAID:
        await gaid_handler.process_photo(message, state)
    elif data.get('data_type') == DataType.KURS:
        await kurs_handler.process_photo(message, state)

@router.message(AddDataStates.description, F.text)
async def add_gaid_description(message: Message, state: FSMContext):
    data = await state.get_data()
    logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    if data.get('data_type') == DataType.GAID:
        await gaid_handler.process_description(message, state)
    elif data.get('data_type') == DataType.KURS:
        await kurs_handler.process_description(message, state)

@router.message(AddDataStates.file, F.document)
async def add_gaid_file(message: Message, state: FSMContext):
    data = await state.get_data()
    logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    if data.get('data_type') == DataType.GAID:
        await gaid_handler.process_file(message, state)
    elif data.get('data_type') == DataType.KURS:
        await kurs_handler.process_file(message, state)

@router.message(AddDataStates.price_card, F.text)
async def add_gaid_price_card(message: Message, state: FSMContext):
    data = await state.get_data()
    logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö –¥–ª—è –¥–∞–Ω–Ω—ã—Ö. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    if data.get('data_type') == DataType.GAID:
        await gaid_handler.process_price_card(message, state)
    elif data.get('data_type') == DataType.KURS:
        await kurs_handler.process_price_card(message, state)

@router.message(AddDataStates.price_star, F.text)
async def add_gaid_price_star(message: Message, state: FSMContext):
    data = await state.get_data()
    logger.info(f"[PROCESS] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –≤ –∑–≤–µ–∑–¥–∞—Ö –¥–ª—è –¥–∞–Ω–Ω—ã—Ö. –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    if data.get('data_type') == DataType.GAID:
        await gaid_handler.process_price_star(message, state)
    elif data.get('data_type') == DataType.KURS:
        await kurs_handler.process_price_star(message, state)